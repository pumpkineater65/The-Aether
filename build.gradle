//buildscript {
//    dependencies {
//        classpath "de.guntram.mcmod:crowdin-translate:${project.crowdin_translate_version}"
//    }
//    repositories {
//        maven {
//            name = 'CrowdinTranslate source'
//            url = "https://minecraft.guntram.de/maven/"
//        }
//    }
//}

plugins {
    id 'fabric-loom' version '0.8.17'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "1.2.1"
}

//apply plugin: 'de.guntram.mcmod.crowdin-translate'
//crowdintranslate.crowdinProjectName = 'aether'
//crowdintranslate.minecraftProjectName = 'the_aether'
//crowdintranslate.verbose = true

JavaVersion targetVersion = JavaVersion.VERSION_16

allprojects {
    sourceCompatibility = targetVersion
    targetCompatibility = targetVersion
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        url = "https://minecraft.guntram.de/maven/"
    }
    maven { url "https://maven.jamieswhiteshirt.com/libs-release/" }
    maven {
        name = "Modmenu"
        url = "https://maven.fabricmc.net/io/github/prospector/modmenu/"
    }
    maven {
        name = "Fabric"
        url = "https://maven.fabricmc.net/"
    }
    maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' }
    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }
    maven {
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url "https://hephaestus.dev/release" }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Libs"
        url = "https://ladysnake.jfrog.io/artifactory/mods"
    }
    maven { url "https://jitpack.io" }
    maven {
        name = "NerdHubMC"
        url = "https://maven.abusedmaster.xyz/"
    }
    maven {
        url = "https://maven.shedaniel.me/"
    }
    maven {
        url = "http://maven.kyrptonaught.dev/"
        allowInsecureProtocol = true
    }
    mavenCentral()
}

minecraft {
    accessWidener "src/main/resources/the_aether.accesswidener"
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings minecraft.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Libraries
//    modImplementation(include("com.jamieswhiteshirt:reach-entity-attributes:2.1.1"))
//    modImplementation(include("io.github.cottonmc:LibGui:4.0.0+"))

//    modImplementation "de.guntram.mcmod:crowdin-translate:${project.crowdin_translate_version}"
//    include "de.guntram.mcmod:crowdin-translate:${project.crowdin_translate_version}"

    // Implement the required portions of FAPI
    // Remember to maintain these, and add the modular bits as needed. 
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    // Testing only, do not JiJ
//    modImplementation "com.terraformersmc:modmenu:2.0.0-beta.7"
//    modRuntime "me.shedaniel:RoughlyEnoughItems-fabric:6.0.250-alpha"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

//    modRuntime("com.github.SuperCoder7979:databreaker:${databreaker_version}") {
//        exclude module: "fabric-loader"
//    }

    // Custom Portal Api
//    modImplementation "net.kyrptonaught:customportalapi:${project.customportalapi_version}"
//    include "net.kyrptonaught:customportalapi:${project.customportalapi_version}"

//    modImplementation "dev.hephaestus:seedy-behavior:${project.seedy_version}"
//    include "dev.hephaestus:seedy-behavior:${project.seedy_version}"

    // Implement Trinkets for parachutes, rings etc.
//    modImplementation "dev.emi:trinkets:${trinkets_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand 'version': project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = 'UTF-8'

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    if (targetVersion.isJava9Compatible()) {
        it.options.release = Integer.parseInt(targetVersion.getMajorVersion())
    }
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

//task publishModrinth (type: TaskModrinthUpload){
//    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//    System.out.println("Enter the modrinth auth token: ");
//    token = br.readLine(); // Get password
//    projectId = 'IKpsG0nF'
//    System.out.println("Enter the version number:");
//    versionNumber = br.readLine();
//    System.out.println("Enter the version name:");
//    versionName = br.readLine();
//    uploadFile = jar // This is the java jar task
//    System.out.println("Enter the game version number: (See minotaur docs for valids)");
//    addGameVersion(br.readLine());
//    System.out.println("Enter changelog:");
//    changelog = br.readLine();
//    addLoader('fabric')
//}

jar {
    manifest {
        attributes 'Implementation-Title': 'AetherReborn',
                'Implementation-Version': project.version,
                'Main-Class': 'com.aether.executable.InstallerGUI'
    }
    from "LICENSE.md"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

//build {
//    dependsOn downloadTranslations
//}
